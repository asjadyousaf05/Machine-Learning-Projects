# -*- coding: utf-8 -*-
"""Day14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MixTZxk2VfTEf44_grRmGp4wYKrlvgwz
"""

import numpy as np
import pandas as pd

chunk_iter = pd.read_csv('movies.csv', chunksize=1000)


data = pd.concat(chunk_iter)

data.shape

selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

for feature in selected_features:
  print(data[feature].isnull().sum())

for feature in selected_features:
  data[feature] = data[feature].fillna('')

comb_features = data['genres']+' '+data['keywords']+' '+data['tagline']+' '+data['cast']+' '+data['director']

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(comb_features)
print(feature_vectors)

co_sim = cosine_similarity(feature_vectors)

print(co_sim)

co_sim.shape

movie_name = input(' Enter your favourite movie name : ')

all_titles = data['title'].tolist()
print(all_titles)

import difflib

close_match = difflib.get_close_matches(movie_name, all_titles)
print(close_match)

closest_match = close_match[0]
print(closest_match)

index_of_the_movie = data[data.title == closest_match]['index'].values[0]
print(index_of_the_movie)

similarity_score = list(enumerate(co_sim[index_of_the_movie]))
print(similarity_score)

len(similarity_score)

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = data[data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1

movie_name = input(' Enter your favourite movie name : ')
all_titles = data['title'].tolist()

close_match = difflib.get_close_matches(movie_name, all_titles)

closest_match = close_match[0]

index_of_the_movie = data[data.title == closest_match]['index'].values[0]

similarity_score = list(enumerate(co_sim[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = data[data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1



