# -*- coding: utf-8 -*-
"""day12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eG0Lnjudg5p_TdtskHo_QOO7e6C82ELO
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from scipy.cluster.hierarchy import linkage,dendrogram
import plotly.express as px

iris = pd.read_csv('iris.csv')

iris.head().style.background_gradient(cmap =sns.cubehelix_palette(as_cmap=True))

iris.info()

iris.isnull().sum()

iris.describe(include='all')

X = iris.iloc[: , :-1].values
y = iris.iloc[: , -1].values

fig = px.scatter(data_frame=iris, x='sepal_length',color='species')
fig.update_layout(width=800, height=600,
                  xaxis=dict(title='sepallength',color="#BF40BF"),
                 yaxis=dict(title="Flower Name",color="#BF40BF"))
fig.show()

fig = px.scatter(data_frame=iris, x='sepal_width',color='species')
fig.update_layout(width=800, height=600,
                  xaxis=dict(title='sepalwidth',color="#BF40BF"),
                 yaxis=dict(title="Flower Name",color="#BF40BF"))
fig.show()

fig = px.scatter(data_frame=iris, x='petal_length',color='species')
fig.update_layout(width=800, height=600,
                  xaxis=dict(title='petallength',color="#BF40BF"),
                 yaxis=dict(title="Flower Name",color="#BF40BF"))
fig.show()

fig = px.scatter(data_frame=iris, x='petal_width',color='species')
fig.update_layout(width=800, height=600,
                  xaxis=dict(title='petalwidth',color="#BF40BF"),
                 yaxis=dict(title="Flower Name",color="#BF40BF"))
fig.show()

scaler= StandardScaler()
scaled_features= scaler.fit_transform(X)

import scipy.cluster.hierarchy as sch

dendogram=sch.dendrogram(sch.linkage(X,method="ward"))
plt.show()

plt.figure(figsize=(10,10))
plt.title("Hierarchical Clustering Dendogram")
plt.xlabel("Observation Units")
plt.ylabel("distances")
dendrogram(linkage(X,"complete"),
          leaf_font_size=10,
          truncate_mode="lastp",
           p=10,
           show_contracted=True)
plt.show()

from sklearn.cluster import AgglomerativeClustering
agg_model = AgglomerativeClustering(n_clusters=3, linkage='ward')

cluster_labels = agg_model.fit_predict(scaled_features)

plt.figure(figsize=(8, 6))
plt.scatter(scaled_features[:, 0], scaled_features[:, 1], c=cluster_labels, cmap='viridis', marker='o')
plt.title("Hierarchical Clustering of Iris Data")
plt.xlabel("X")
plt.ylabel("Y")
plt.grid(True)
plt.show()

from sklearn.metrics import adjusted_rand_score
ari = adjusted_rand_score(iris.species,cluster_labels)
print(f"Adjusted Rand Index: {ari:.3f}")

